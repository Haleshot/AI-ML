# -*- coding: utf-8 -*-
"""IS_1_Exp_3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Pkjejh93IRIMXin12_WNsuNZLSUx3W8J
"""

from re import S
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.api as sm

# Reading the brain_data.csv file
data = pd.read_csv('/content/brain_data.csv')

data

#data

x = data["Head Size(cm^3)"] # Extracting the Head Size column from the dataframe
y = data["Brain Weight(grams)"] # Extracting the Brain Weight column from the dataframe
plt.figure(figsize = (8, 6)) # Defining the size of the plot
plt.scatter(x, y, color = 'blue', marker = '2', label = 'Actual') # How it appears in the output screen/ beautification
plt.plot(x, y_predict, color = "green") # The Model plots the best fit line with the help of b0 and b1 values which it finds out.
plt.xlabel("Head Size(cm^3)")
plt.ylabel("Brain Weight(grams")

# Reading the home price.csv file
data_1 = pd.read_csv('/content/home price.csv')

data_1

a = data_1["Sq.ft"]
b = data_1["Price"]
plt.figure(figsize = (8, 6))
plt.scatter(a, b, color = 'green', marker = '+', label = 'Actual')
plt.plot(a, b_predict, color = "green") # The Model plots the best fit line with the help of b0 and b1 values which it finds out.
plt.xlabel("Square Feet")
plt.ylabel("Price")

# Building a model for training the intelligent agent

from sklearn.linear_model import LinearRegression

model = LinearRegression()
model_1 = LinearRegression()

# y = b0 + b1x
# Brain Weight = B0 + B1 * Brain Size

x # Before reshape function

x = data["Head Size(cm^3)"].values.reshape(-1, 1) # Changing the shape of the variable x, making it a 2D array
a = data_1["Sq.ft"].values.reshape(-1, 1) # Changing the shape of the variable a, making it a 2D array

x # After reshape function

# Fitting the data to the model
model.fit(x, y)
model_1.fit(a, b)

# Prediction
y_predict = model.predict(x)
b_predict = model_1.predict(a)

y_predict

model.intercept_ # Predicting the value of b0

model.coef_ # Predicting the value of b1

b_predict

model_1.intercept_

model_1.coef_

